#include <stdio.h>
#include <stdlib.h>

#define MAX_ITEMS 100


struct Item {
    int value;
    int weight;
    float ratio;
};
struct Node {
    int level;        
    int profit;      
    int weight;        
    float bound;       
};
int compare(const void* a, const void* b) {
    float r1 = ((struct Item*)a)->ratio;
    float r2 = ((struct Item*)b)->ratio;
    if (r1 > r2) return -1;
    if (r1 < r2) return 1;
    return 0;
}


float bound(struct Node u, int n, int W, struct Item items[]) {
    
    if (u.weight >= W) return 0;

    float result = u.profit;
    int j = u.level + 1;
    int totalWeight = u.weight;

    
    while (j < n && totalWeight + items[j].weight <= W) {
        totalWeight += items[j].weight;
        result += items[j].value;
        j++;
    }


    if (j < n)
        result += (W - totalWeight) * items[j].ratio;

    return result;
}


int knapSack(int W, struct Item items[], int n) {
    
    qsort(items, n, sizeof(struct Item), compare);
    struct Node queue[MAX_ITEMS];
    int front = -1, rear = -1;

    
    struct Node root = {-1, 0, 0, 0.0};
    queue[++rear] = root;

    int maxProfit = 0;

    
    while (front != rear) {
        struct Node u = queue[++front];
        if (u.level == n - 1) continue;
        struct Node v = u;
        v.level = u.level + 1;

    
        if (v.weight + items[v.level].weight <= W) {
            v.weight += items[v.level].weight;
            v.profit += items[v.level].value;

            if (v.profit > maxProfit) 
                maxProfit = v.profit;

            v.bound = bound(v, n, W, items);

            
            if (v.bound > maxProfit) 
                queue[++rear] = v;
        }

        
        v = u;
        v.bound = bound(v, n, W, items);
        if (v.bound > maxProfit)
            queue[++rear] = v;
    }

    return maxProfit;
}

int main() {
    struct Item items[] = {{60, 10, 6}, {100, 20, 5}, {120, 30, 4}};
    int W = 50;
    int n = sizeof(items) / sizeof(items[0]);

    
    for (int i = 0; i < n; i++) {
        items[i].ratio = (float)items[i].value / items[i].weight;
    }

    int maxProfit = knapSack(W, items, n);
    printf("Maximum profit: %d\n", maxProfit);

    return 0;
}
